{
  "swaggerDefinition": {
    "openapi": "3.0.0",
    "info": {
      "title": "EasyLife_Backend",
      "version": "1.0.0",
      "description": "API documentation"
    },
    "servers": [
      {
        "url": "http://localhost:8000",
        "description": "Development server"
      }
    ],
    "components": {
      "securitySchemes": {
        "bearerAuth": {
          "type": "http",
          "scheme": "bearer",
          "bearerFormat": "JWT"
        }
      },
      "schemas": {
        "User": {
          "type": "object",
          "required": ["name", "email", "password"],
          "properties": {
            "name": {
              "type": "string",
              "description": "The user's  name",
              "example": "John"
            },
            "image": {
              "type": "string",
              "description": "path to fin profile photos of user, have default value"
            },
            "friends": [
              {
                "type": "string",
                "description": "The user's friends",
                "ref": "string"
              }
            ],
            "email": {
              "type": "string",
              "description": "The user's email",
              "example": "johndoe@example.com"
            },
            "phone": {
              "type": "string",
              "description": "The user's phone number",
              "example": "+1234567890"
            },
            "password": {
              "type": "string",
              "description": "The user's password",
              "example": "secret"
            },
            "token": {
              "type": "string",
              "description": "An optional token for the user",
              "example": "somerandomtoken"
            },
            "city": {
              "type": "string",
              "description": "The user's city",
              "example": "paris"
            },
            "role": {
              "type": "string",
              "enum": ["admin", "user"],
              "default": "user"
            },
            "lastLogin": {
              "type": "Date",
              "description": "the last login of user",
              "default": "null"
            },
            "deleted": {
              "type": "Boolean",
              "description": "if a user deleted or no",
              "default": "false"
            },
            " deletedAt": {
              "type": "Date",
              "description": "date of delate a user",
              "default": "null"
            },
            " verificationCode": {
              "type": "String",
              "default": "null"
            },
            " isVerified": {
              "type": "Boolean",
              "default": "false"
            },
            " resetCode": {
              "type": " String",
              "default": ""
            }
          }
        },

        "Login": {
          "type": "object",
          "required": ["username"],
          "properties": {
            "username": {
              "type": "string",
              "description": "The user's username",
              "exemple": "johnDoe"
            },
            "password": {
              "type": "string",
              "description": "the user's password",
              "exemple": "coucou"
            }
          }
        },
        "TodoItem": {
          "type": "object",
          "required": ["title", "user_id"],
          "properties": {
            "user_id": {
              "type": "string",
              "description": "user's objectID of user create a toDoItem",
              "example": "66a941d4d83285e45c8ea688"
            },
            "title": {
              "type": "string",
              "description": "a title of toDoItem",
              "example": "rdv"
            },
            "description": {
              "type": "string",
              "description": "more details about a ToDoItem",
              "example": "rdv dentiste"
            },
            "date": {
              "type": "string",
              "description": "a date of toDoItem",
              "example": "2024-01-01"
            },
            "time": {
              "type": "string",
              "description": "a time of toDoItem",
              "example": "2024-01-01T00:00:00Z"
            },
            "outside": {
              "type": "boolean",
              "description": "choise if the ToDoItem is outside or no to have a reminder of weather",
              "default": false
            },
            "weather": {
              "type": "object",
              "description": "Weather information for outside tasks",
              "properties": {
                "description": {
                  "type": "string",
                  "description": "weather description",
                  "example": "cloudy"
                },
                "temp": {
                  "type": "number",
                  "description": "temperature",
                  "example": 22
                },
                "icone": {
                  "type": "string",
                  "description": "icon representing the weather",
                  "example": "cloud"
                }
              }
            },
            "status": {
              "type": "string",
              "enum": ["coming", "active", "done", "cancelled", "late"]
            },
            "create_at": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the toDoItem was created",
              "example": "2024-01-01T00:00:00Z"
            },
            "update_at": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the toDoItem was last updated",
              "example": "2024-01-01T00:00:00Z"
            }
          }
        },
        "Message": {
          "type": "object",
          "required": ["user_id"],
          "properties": {
            "user_id": {
              "type": "string",
              "description": "user's objectID of user send a message",
              "exemple": "66a941d4d83285e45c8ea688"
            },
            "content": {
              "type": "string",
              "description": "a message "
            },
            "recipientId": {
              "type": "string",
              "description": "user's objectID of user recipient a message"
            },
            "create_at": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the msg was recived",
              "exemple": "2024-01-01T00:00:00Z"
            },
            "update_at": {
              "type": "string",
              "format": "date-time",
              "description": "Date when the msg was updated",
              "exemple": "2024-01-01T00:00:00Z"
            }
          }
        },
        "Friends": {
          "requester": {
            "type": "String",
            "ref": "User"
          },
          "recipient": {
            "type": "String",
            "ref": "User"
          },
          "status": {
            "type": "string",
            "enum": ["pending", "accepted", "rejected"],
            "default": "pending"
          }
        }
      },
      "responses": {
        "NotFound": {
          "description": "Resource not found",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type_error": {
                    "type": "string",
                    "example": "no-found"
                  },
                  "message": {
                    "type": "string",
                    "example": "Resource not found"
                  }
                }
              }
            }
          }
        },
        "ValidationError": {
          "description": "Validation error",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type_error": {
                    "type": "string",
                    "example": "validator"
                  },
                  "message": {
                    "type": "string",
                    "example": "Validation error"
                  }
                }
              }
            }
          }
        },
        "DuplicateError": {
          "description": "Duplicate entry",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type_error": {
                    "type": "string",
                    "example": "duplicate"
                  },
                  "message": {
                    "type": "string",
                    "example": "Duplicate entry"
                  }
                }
              }
            }
          }
        },
        "RequestNotValide": {
          "description": "request params no valid",
          "content": {
            "application/json": {
              "schemas": {
                "type": "object",
                "properties": {
                  "type_error": {
                    "type": "string",
                    "exemple": "no-valid"
                  },
                  "msg": {
                    "type": "string",
                    "exemple": "request not valid"
                  }
                }
              }
            }
          }
        },

        "ErrorLogin": {
          "description": "username or password are false",
          "content": {
            "application/json": {
              "schemas": {
                "type": "object",
                "properties": {
                  "type_error": {
                    "type": "string",
                    "exemple": "no-valid"
                  },
                  "msg": {
                    "type": "string",
                    "exemple": "request not valid"
                  }
                }
              }
            }
          }
        }
      }
    },
    "security": [
      {
        "bearerAuth": []
      }
    ],

    "tags": [
      {
        "name": "Authentification",
        "description": "Operation about Login"
      },
      {
        "name": "User",
        "description": "Operations about user"
      },
      {
        "name": "TodoItem",
        "description": "Operations about TodoItem"
      },
      {
        "name": "Friends",
        "description": "Operations about Friends"
      },
      {
        "name": "Message",
        "description": "Operations about Message"
      }
    ]
  },
  "apis": ["./SwaggerDocs/*.js"]
}
